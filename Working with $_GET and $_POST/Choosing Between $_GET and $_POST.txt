Instruction
Choosing Between $_GET and $_POST
Which Superglobal Should I Use? $_GET or $_POST?
If you aren't sure about when to use $_GET and $_POST superglobal variables, here are some basic rules that will help you get started. Check out the two examples below illustrating which superglobal variable to use and when.

With Query String
Use the $_GET method if the information youâ€™ll be passing is not sensitive or a security vulnerability. For example, a search function is a common use case which will pass the data through the URL.

<?php
$name = $_GET['name'];
$lang = $_GET['lang'];
echo '<p>' . $name . '</p>';
echo '<p>' . $lang . '</p>';
?>
To avoid the Notice alert, remember to use an if() statement and the isset() function like this:

<?php
 if (isset($_GET['name'], $_GET['lang'])){
    $name = $_GET['name'];
    $lang = $_GET['lang'];
    echo $name . '<br>'; 
    echo $lang; 
    }
?>
IMG

Without Query String
Use the $_POST superglobal if you want to send sensitive data to a file or database in a more secure way. For example, when passing a secure user password it's best to do so with a $_POST request that doesn't display the data in a query string in the URL:

<?php
  $name = $_POST['name'];
  $lang = $_POST['lang'];
  echo '<p>' . $name . '</p>';
  echo '<p>' . $lang . '</p>';
  ?>
To avoid getting a Notice alert, remember to use the isset() function like this:

<?php
 if (isset($_POST['name'], $_POST['lang'])){
    $name = $_POST['name'];
    $lang = $_POST['lang'];
    echo $name . '<br>'; 
    echo $lang;
    }
  ?>
IMG

In the next section you'll have an opportunity to test what you've learned by taking a quiz on PHP superglobals. After taking the quiz, you'll learn how to develop a security mindset by Filtering Inputs and Escaping Outputs. See you in the next section!